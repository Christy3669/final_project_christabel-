# final_assignment_christabel
def generate_password(length, use_uppercase=True, use_numbers=True, use_symbols=True):
    """
    Generates a random password of specified length.

    Args:
        length (int): Length of the password.
        use_uppercase (bool): Include uppercase letters. Defaults to True.
        use_numbers (bool): Include numbers. Defaults to True.
        use_symbols (bool): Include symbols. Defaults to True.

    Returns:
        str: Randomly generated password.
    """
    # Define character sets
    lowercase_letters = string.ascii_lowercase
    uppercase_letters = string.ascii_uppercase
    numbers = string.digits
    symbols = string.punctuation

    # Combine character sets based on user preferences
    all_characters = lowercase_letters
    if use_uppercase:
        all_characters += uppercase_letters
    if use_numbers:
        all_characters += numbers
    if use_symbols:
        all_characters += symbols

    # Ensure password includes at least one of each chosen character type
    password = []
    if use_uppercase:
        password.append(random.choice(uppercase_letters))
    if use_numbers:
        password.append(random.choice(numbers))
    if use_symbols:
        password.append(random.choice(symbols))
    for _ in range(length - len(password)):
        password.append(random.choice(all_characters))

    # Shuffle password to avoid first characters always being in same character type order
    random.shuffle(password)

    return ''.join(password)

def main():
    length = int(input("Enter password length (minimum 4): "))
    if length < 4:
        print("Password length should be at least 4.")
    else:
        use_uppercase = input("Include uppercase letters? (y/n): ").lower() == 'y'
        use_numbers = input("Include numbers? (y/n): ").lower() == 'y'
        use_symbols = input("Include symbols? (y/n): ").lower() == 'y'
        
        password = generate_password(length, use_uppercase, use_numbers, use_symbols)
        print(f"Generated Password: {password}")

if __name__ == "__main__":
    main()
``]







